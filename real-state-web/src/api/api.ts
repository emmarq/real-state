/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PagedResultOfRealState
 */
export interface PagedResultOfRealState {
    /**
     * 
     * @type {Array<RealState>}
     * @memberof PagedResultOfRealState
     */
    'Items'?: Array<RealState>;
    /**
     * 
     * @type {number}
     * @memberof PagedResultOfRealState
     */
    'TotalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResultOfRealState
     */
    'PageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResultOfRealState
     */
    'PageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedResultOfRealState
     */
    'TotalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResultOfRealState
     */
    'HasPrevious'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedResultOfRealState
     */
    'HasNext'?: boolean;
}
/**
 * 
 * @export
 * @interface RealState
 */
export interface RealState {
    /**
     * 
     * @type {string}
     * @memberof RealState
     */
    'Id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RealState
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealState
     */
    'Address'?: string;
    /**
     * 
     * @type {number}
     * @memberof RealState
     */
    'Price'?: number;
    /**
     * 
     * @type {string}
     * @memberof RealState
     */
    'CodeInternal'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealState
     */
    'Year'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealState
     */
    'Image'?: string;
    /**
     * 
     * @type {RealStateOwner}
     * @memberof RealState
     */
    'Owner'?: RealStateOwner;
    /**
     * 
     * @type {Array<RealStateTrace>}
     * @memberof RealState
     */
    'Trace'?: Array<RealStateTrace>;
}
/**
 * 
 * @export
 * @interface RealStateOwner
 */
export interface RealStateOwner {
    /**
     * 
     * @type {string}
     * @memberof RealStateOwner
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealStateOwner
     */
    'Address'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealStateOwner
     */
    'Photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealStateOwner
     */
    'Birthday'?: string;
}
/**
 * 
 * @export
 * @interface RealStateTrace
 */
export interface RealStateTrace {
    /**
     * 
     * @type {string}
     * @memberof RealStateTrace
     */
    'DateSale'?: string;
    /**
     * 
     * @type {string}
     * @memberof RealStateTrace
     */
    'Name'?: string;
    /**
     * 
     * @type {number}
     * @memberof RealStateTrace
     */
    'Value'?: number;
    /**
     * 
     * @type {number}
     * @memberof RealStateTrace
     */
    'Tax'?: number;
}

/**
 * RealStatesApi - axios parameter creator
 * @export
 */
export const RealStatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('realStatesDelete', 'id', id)
            const localVarPath = `/api/RealStates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string | null} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {string | null} [name] 
         * @param {string | null} [address] 
         * @param {number | null} [minPrice] 
         * @param {number | null} [maxPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesGet: async (pageNumber?: number, pageSize?: number, sortBy?: string | null, sortDescending?: boolean, name?: string | null, address?: string | null, minPrice?: number | null, maxPrice?: number | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/RealStates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['sortDescending'] = sortDescending;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (address !== undefined) {
                localVarQueryParameter['Address'] = address;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesGet2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('realStatesGet2', 'id', id)
            const localVarPath = `/api/RealStates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RealState} realState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesPost: async (realState: RealState, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'realState' is not null or undefined
            assertParamExists('realStatesPost', 'realState', realState)
            const localVarPath = `/api/RealStates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(realState, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RealState} realState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesUpdate: async (id: string, realState: RealState, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('realStatesUpdate', 'id', id)
            // verify required parameter 'realState' is not null or undefined
            assertParamExists('realStatesUpdate', 'realState', realState)
            const localVarPath = `/api/RealStates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(realState, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealStatesApi - functional programming interface
 * @export
 */
export const RealStatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealStatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realStatesDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realStatesDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealStatesApi.realStatesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string | null} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {string | null} [name] 
         * @param {string | null} [address] 
         * @param {number | null} [minPrice] 
         * @param {number | null} [maxPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realStatesGet(pageNumber?: number, pageSize?: number, sortBy?: string | null, sortDescending?: boolean, name?: string | null, address?: string | null, minPrice?: number | null, maxPrice?: number | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultOfRealState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realStatesGet(pageNumber, pageSize, sortBy, sortDescending, name, address, minPrice, maxPrice, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealStatesApi.realStatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realStatesGet2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realStatesGet2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealStatesApi.realStatesGet2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RealState} realState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realStatesPost(realState: RealState, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realStatesPost(realState, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealStatesApi.realStatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RealState} realState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realStatesUpdate(id: string, realState: RealState, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realStatesUpdate(id, realState, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealStatesApi.realStatesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RealStatesApi - factory interface
 * @export
 */
export const RealStatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealStatesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.realStatesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string | null} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {string | null} [name] 
         * @param {string | null} [address] 
         * @param {number | null} [minPrice] 
         * @param {number | null} [maxPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesGet(pageNumber?: number, pageSize?: number, sortBy?: string | null, sortDescending?: boolean, name?: string | null, address?: string | null, minPrice?: number | null, maxPrice?: number | null, options?: RawAxiosRequestConfig): AxiosPromise<PagedResultOfRealState> {
            return localVarFp.realStatesGet(pageNumber, pageSize, sortBy, sortDescending, name, address, minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesGet2(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RealState> {
            return localVarFp.realStatesGet2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RealState} realState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesPost(realState: RealState, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.realStatesPost(realState, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {RealState} realState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realStatesUpdate(id: string, realState: RealState, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.realStatesUpdate(id, realState, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealStatesApi - object-oriented interface
 * @export
 * @class RealStatesApi
 * @extends {BaseAPI}
 */
export class RealStatesApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStatesApi
     */
    public realStatesDelete(id: string, options?: RawAxiosRequestConfig) {
        return RealStatesApiFp(this.configuration).realStatesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string | null} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {string | null} [name] 
     * @param {string | null} [address] 
     * @param {number | null} [minPrice] 
     * @param {number | null} [maxPrice] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStatesApi
     */
    public realStatesGet(pageNumber?: number, pageSize?: number, sortBy?: string | null, sortDescending?: boolean, name?: string | null, address?: string | null, minPrice?: number | null, maxPrice?: number | null, options?: RawAxiosRequestConfig) {
        return RealStatesApiFp(this.configuration).realStatesGet(pageNumber, pageSize, sortBy, sortDescending, name, address, minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStatesApi
     */
    public realStatesGet2(id: string, options?: RawAxiosRequestConfig) {
        return RealStatesApiFp(this.configuration).realStatesGet2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RealState} realState 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStatesApi
     */
    public realStatesPost(realState: RealState, options?: RawAxiosRequestConfig) {
        return RealStatesApiFp(this.configuration).realStatesPost(realState, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {RealState} realState 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealStatesApi
     */
    public realStatesUpdate(id: string, realState: RealState, options?: RawAxiosRequestConfig) {
        return RealStatesApiFp(this.configuration).realStatesUpdate(id, realState, options).then((request) => request(this.axios, this.basePath));
    }
}



